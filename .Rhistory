library(e1071)
source("dataCleaning.R")
source("f1_score.R")
data <- read.csv("data/music_genre.csv")
data <- cleanData(data)
data <- cleanData(data)
data <- cleanData(data)
library(e1071)
source("dataCleaning.R")
source("f1_score.R")
data <- read.csv("data/music_genre.csv")
data <- cleanData(data)
# labels need to be a factor for SVM
data$music_genre <- as.factor(data$music_genre)
n <- nrow(data)
ntrain <- round(n*0.75)
install.packages("ggally")
install.packages("GGally")
library(GGally)
# labels need to be a factor for SVM
data$music_genre <- as.factor(data$music_genre)
n <- nrow(data)
ntrain <- round(n*0.75)
set.seed(311)
train_indexes <- sample(n, ntrain)
train_data <- data[train_indexes,]
test_data <- data[-train_indexes,]
pairs(test_data, main = "Test Data", pch = 21, bg = c("red", "green3", "blue","yellow","purple","deeppink")[unclass(data$music_genre)])
ggpairs(test_data)
View(data)
data <- read.csv("data/music_genre.csv")
data <- cleanData(data)
png(filename="pairs_plot", width=1000, height=1000)
ggpairs(iris,
columns=, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
colour='Species',
lower=list(continuous='points'),
axisLabels='none'
)
dev.off()
png(filename="pairs_plot", width=2000, height=2000)
ggpairs(test_data,
upper=list(continuous='blank'))
dev.off()
png(filename="pairs_plot", width=4000, height=4000)
ggpairs(test_data,
upper=list(continuous='blank'))
dev.off()
png(filename="pairs_plot.pdf", width=5000, height=5000)
ggpairs(test_data,
upper=list(continuous='blank'))
dev.off()
png(filename="pairs_plot.png", width=5000, height=5000)
ggpairs(test_data,
upper=list(continuous='blank'))
dev.off()
png(filename="pairs_plot.png", width=5000, height=5000)
ggpairs(test_data,
color="music_genre"
upper=list(continuous='blank')
)
dev.off()
png(filename="pairs_plot.png", width=5000, height=5000)
ggpairs(test_data,
color="music_genre",
upper=list(continuous='blank')
)
dev.off()
png(filename="pairs_plot.png", width=5000, height=5000)
ggpairs(test_data,
color="music_genre",
upper=list(continuous='blank')
)
dev.off()
library(e1071)
library(GGally)
source("dataCleaning.R")
source("f1_score.R")
data <- read.csv("data/music_genre.csv")
data <- cleanData(data)
# labels need to be a factor for SVM
data$music_genre <- as.factor(data$music_genre)
n <- nrow(data)
ntrain <- round(n*0.75)
set.seed(311)
train_indexes <- sample(n, ntrain)
train_data <- data[train_indexes,]
test_data <- data[-train_indexes,]
model <- svm(music_genre ~ ., data = train_data,
method="C-classification",
kernel="radial",
cost=5
)
prediction <- predict(model, test_data)
levels = levels(prediction)
table = table(test_data$music_genre, prediction)
f1_scores(levels, table)
f1_score_micro(levels, table)
f1_score_macro(levels, table)
f1_score_weighted(levels, table)
table
f1_scores(levels, table)
f1_scores(levels, table)
f1_score_micro(levels, table)
f1_score_macro(levels, table)
f1_score_weighted(levels, table)
f1_scores(levels, table)
f1_score_micro(levels, table)
f1_score_macro(levels, table)
f1_score_weighted(levels, table)
